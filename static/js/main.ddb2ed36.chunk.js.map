{"version":3,"sources":["context.js","components/Form/Inputs/UsernameInput.js","components/Form/Inputs/EmailInput.js","components/Form/Inputs/PasswordInput.js","components/Form/Inputs/ConfirmPasswordInput.js","components/Form/Form.js","components/SuccessBanner/SuccessBanner.js","App.js","index.js"],"names":["AppContext","createContext","AppProvider","children","useState","username","setUsername","isUsernameValid","toggleIsUsernameValid","email","setEmail","isEmailValid","toggleIsEmailValid","password","setPassword","isPasswordValid","toggleIsPasswordValid","confirmPassword","setConfirmPassword","isConfirmPasswordValid","toggleIsConfirmPasswordValid","contextObject","isBannerActive","toggleIsBannerActive","Provider","value","UsernameInput","useContext","className","type","onChange","e","target","trim","required","EmailInput","PasswordInput","ConfirmPasswordInput","Form","validateUsername","length","validateEmail","isProvidedEmailValid","validatePassword","validateConfirmPassword","test","String","toLowerCase","validateForm","showSuccessBanner","setTimeout","resetFormInputValues","noValidate","onSubmit","preventDefault","SuccessBanner","bannerClassName","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ddb2ed36.chunk.js","sourcesContent":["import { createContext, useState } from 'react';\r\n\r\nexport const AppContext = createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n  const [username, setUsername] = useState('');\r\n  const [isUsernameValid, toggleIsUsernameValid] = useState(true);\r\n  const [email, setEmail] = useState('');\r\n  const [isEmailValid, toggleIsEmailValid] = useState(true);\r\n  const [password, setPassword] = useState('');\r\n  const [isPasswordValid, toggleIsPasswordValid] = useState(true);\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [isConfirmPasswordValid, toggleIsConfirmPasswordValid] = useState(true);\r\n  const [isBannerActive, toggleIsBannerActive] = useState(false);\r\n\r\n  const contextObject = {\r\n    username,\r\n    setUsername,\r\n    isUsernameValid,\r\n    toggleIsUsernameValid,\r\n    email,\r\n    setEmail,\r\n    isEmailValid,\r\n    toggleIsEmailValid,\r\n    password,\r\n    setPassword,\r\n    isPasswordValid,\r\n    toggleIsPasswordValid,\r\n    confirmPassword,\r\n    setConfirmPassword,\r\n    isConfirmPasswordValid,\r\n    toggleIsConfirmPasswordValid,\r\n    isBannerActive,\r\n    toggleIsBannerActive,\r\n  };\r\n\r\n  return <AppContext.Provider value={contextObject}>{children}</AppContext.Provider>;\r\n};\r\n\r\nexport default AppProvider;\r\n","import { useContext } from 'react';\r\nimport { AppContext } from 'context';\r\n\r\nconst UsernameInput = () => {\r\n  const { username, setUsername, isUsernameValid } = useContext(AppContext);\r\n\r\n  const handleUsernameChange = e => setUsername(e.target.value.trim());\r\n\r\n  return (\r\n    <div className='form-element'>\r\n      <input type='text' value={username} onChange={handleUsernameChange} required />\r\n      <label className='label'>\r\n        {isUsernameValid ? (\r\n          <span className='label-text'>Username</span>\r\n        ) : (\r\n          <span className='error-message'>Username must be at least 3 characters</span>\r\n        )}\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsernameInput;\r\n","import { useContext } from 'react';\r\nimport { AppContext } from 'context';\r\n\r\nconst EmailInput = () => {\r\n  const { email, setEmail, isEmailValid } = useContext(AppContext);\r\n\r\n  const handleEmailChange = e => setEmail(e.target.value.trim());\r\n\r\n  return (\r\n    <div className='form-element'>\r\n      <input type='text' value={email} onChange={handleEmailChange} required />\r\n      <label className='label'>\r\n        {isEmailValid ? (\r\n          <span className='label-text'>Email</span>\r\n        ) : (\r\n          <span className='error-message'>Email is not valid</span>\r\n        )}\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EmailInput;\r\n","import { useContext } from 'react';\r\nimport { AppContext } from 'context';\r\n\r\nconst PasswordInput = () => {\r\n  const { password, setPassword, isPasswordValid } = useContext(AppContext);\r\n\r\n  const handlePasswordChange = e => setPassword(e.target.value.trim());\r\n\r\n  return (\r\n    <div className='form-element'>\r\n      <input type='password' value={password} onChange={handlePasswordChange} required />\r\n      <label className='label'>\r\n        {isPasswordValid ? (\r\n          <span className='label-text'>Password</span>\r\n        ) : (\r\n          <span className='error-message'>Password must be at least 8 characters</span>\r\n        )}\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PasswordInput;\r\n","import { useContext } from 'react';\r\nimport { AppContext } from 'context';\r\n\r\nconst ConfirmPasswordInput = () => {\r\n  const { confirmPassword, setConfirmPassword, isConfirmPasswordValid } = useContext(AppContext);\r\n\r\n  const handleConfirmPasswordChange = e => setConfirmPassword(e.target.value.trim());\r\n\r\n  return (\r\n    <div className='form-element'>\r\n      <input\r\n        type='password'\r\n        value={confirmPassword}\r\n        onChange={handleConfirmPasswordChange}\r\n        required\r\n      />\r\n      <label className='label'>\r\n        {isConfirmPasswordValid ? (\r\n          <span className='label-text'>Confirm password</span>\r\n        ) : (\r\n          <span className='error-message'>Passwords must match</span>\r\n        )}\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfirmPasswordInput;\r\n","import { useContext } from 'react';\r\nimport { AppContext } from 'context';\r\n\r\nimport UsernameInput from 'components/Form/Inputs/UsernameInput';\r\nimport EmailInput from 'components/Form/Inputs/EmailInput';\r\nimport PasswordInput from 'components/Form/Inputs/PasswordInput';\r\nimport ConfirmPasswordInput from 'components/Form/Inputs/ConfirmPasswordInput';\r\n\r\nimport './Form.css';\r\n\r\nconst Form = () => {\r\n  const {\r\n    username,\r\n    setUsername,\r\n    isUsernameValid,\r\n    email,\r\n    setEmail,\r\n    isEmailValid,\r\n    password,\r\n    setPassword,\r\n    isPasswordValid,\r\n    confirmPassword,\r\n    setConfirmPassword,\r\n    isConfirmPasswordValid,\r\n    toggleIsUsernameValid,\r\n    toggleIsEmailValid,\r\n    toggleIsPasswordValid,\r\n    toggleIsConfirmPasswordValid,\r\n    toggleIsBannerActive,\r\n  } = useContext(AppContext);\r\n\r\n  const handleFormSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    validateUsername();\r\n    validateEmail();\r\n    validatePassword();\r\n    validateConfirmPassword();\r\n\r\n    if (username && email && password && confirmPassword) {\r\n      validateForm();\r\n    }\r\n\r\n    resetFormInputValues();\r\n  };\r\n\r\n  const validateUsername = () => {\r\n    if (username.length < 3) {\r\n      toggleIsUsernameValid(false);\r\n      return;\r\n    }\r\n\r\n    toggleIsUsernameValid(true);\r\n  };\r\n\r\n  const validateEmail = () => {\r\n    if (!isProvidedEmailValid(email)) {\r\n      toggleIsEmailValid(false);\r\n      return;\r\n    }\r\n\r\n    toggleIsEmailValid(true);\r\n  };\r\n\r\n  const validatePassword = () => {\r\n    if (password.length < 8) {\r\n      toggleIsPasswordValid(false);\r\n      return;\r\n    }\r\n    toggleIsPasswordValid(true);\r\n  };\r\n\r\n  const validateConfirmPassword = () => {\r\n    if (confirmPassword !== password || !confirmPassword) {\r\n      toggleIsConfirmPasswordValid(false);\r\n      return;\r\n    }\r\n\r\n    toggleIsConfirmPasswordValid(true);\r\n  };\r\n\r\n  const isProvidedEmailValid = email => {\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n  };\r\n\r\n  const validateForm = () => {\r\n    if (isUsernameValid && isEmailValid && isPasswordValid && isConfirmPasswordValid) {\r\n      showSuccessBanner();\r\n    }\r\n  };\r\n\r\n  const showSuccessBanner = () => {\r\n    toggleIsBannerActive(true);\r\n\r\n    setTimeout(() => {\r\n      toggleIsBannerActive(false);\r\n    }, 3000);\r\n  };\r\n\r\n  const resetFormInputValues = () => {\r\n    setTimeout(() => {\r\n      setUsername('');\r\n      setEmail('');\r\n      setPassword('');\r\n      setConfirmPassword('');\r\n      toggleIsUsernameValid(true);\r\n      toggleIsEmailValid(true);\r\n      toggleIsPasswordValid(true);\r\n      toggleIsConfirmPasswordValid(true);\r\n    }, 3000);\r\n  };\r\n\r\n  return (\r\n    <form className='form' noValidate onSubmit={handleFormSubmit}>\r\n      <h2>Sign Up Now!</h2>\r\n      <UsernameInput />\r\n      <EmailInput />\r\n      <PasswordInput />\r\n      <ConfirmPasswordInput />\r\n      <button className='submit-button'>Sign up</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import { useContext } from 'react';\r\nimport { AppContext } from 'context';\r\n\r\nimport './SuccessBanner.css';\r\n\r\nconst SuccessBanner = () => {\r\n  const { isBannerActive } = useContext(AppContext);\r\n  const bannerClassName = isBannerActive ? 'success-banner active' : 'success-banner';\r\n\r\n  return (\r\n    <div className={bannerClassName}>\r\n      <p>Form has been submitted successfully!</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SuccessBanner;\r\n","import AppProvider from 'context';\nimport Form from 'components/Form/Form';\nimport SuccessBanner from 'components/SuccessBanner/SuccessBanner';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <AppProvider>\n      <Form />\n      <SuccessBanner />\n    </AppProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}